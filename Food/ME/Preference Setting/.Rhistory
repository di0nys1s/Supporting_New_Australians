rgdal
library(shapefiles)
library(ggplot2)
library(maptools)
shp <- readShapeSpatial('sa2_2016_aust_shape')
datapoly <- merge(values, positions, by=c("id"))
library(plotly)
ids <- factor(c("1.1", "2.1", "1.2", "2.2", "1.3", "2.3"))
values <- data.frame(
id = ids,
value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5)
)
positions <- data.frame(
id = rep(ids, each = 4),
x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3,
0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3),
y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5,
2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2)
)
datapoly <- merge(values, positions, by=c("id"))
datapoly
rep(1:4,each = 3)
rep(1:4,each = 4)
rep(1:4,times = 4)
library(plotly)
library(maps)
county_df <- map_data("county")
state_df <- map_data("state")
# create state boundaries
p <- ggplot(county_df, aes(long, lat, group = group)) +
geom_polygon(colour = alpha("black", 1/2), fill = NA) +
geom_polygon(data = state_df, colour = "black", fill = NA) +
theme_void()
p <- ggplotly(p)
install.packages('plotly')
library(plotly)
install.packages("plotly")
library(plotly)
devtools::install_github("ropensci/plotly")
install.packages('devtools')
devtools::install_github("ropensci/plotly")
# utils.R -- helpers
base_url <- "https://developers.zomato.com"
# passed to httr::modify_url()
add_path <- function(path) {
paste0("/api/v2.1/", path)
}
# if api key or query is valid
handle_error <- function(x, msg) {
if (httr::http_error(x)) {
stop(
sprintf(
"Zomato API request failed [%s]\n%s",
httr::status_code(x),
msg
),
call. = FALSE
)
}
}
# if api key is provided
is_key_null <- function(x = NULL) {
if (is.null(x)) {
stop("\nPlease provide an API key.\nYou can request it here\nhttps://developers.zomato.com/api")
}
}
# tidy-data.R -- data cleaning
# remove some columns (e.g. links to zomato review)
rm_col <- function(data) {
cn <- names(data)
rm_col <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
data[, !grepl(rm_col, cn)]
}
tidy_search <- function(data) {
names(data) <- gsub("restaurant.|location.|user_rating.", "", names(data))
data
}
tidy_reviews <- function(data) {
names(data) <- gsub("user.|review.", "", names(data))
transform(data, timestamp = as.POSIXct(timestamp, origin = "1970-01-01"))
}
# search for any key words
zomato_search <- function(api_key = NULL, query) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("search"))
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(q = query)
)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
tidy_search(rm_col(parsed$restaurants))
}
# search for reviews for restaurants
zomato_reviews <- function(api_key = NULL, res_id) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("reviews"))
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(res_id = res_id)
)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
tidy_reviews(rm_col(parsed$user_reviews))
}
# search for locations by key words
zomato_locations <- function(api_key = NULL, query, lat = NULL, lon = NULL) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("locations"))
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(q = query, lat = lat, lon = lon)
)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
parsed$location_suggestions
}
# basic usage
ur_key <- "your-zomato-api-key"
bbb <- zomato_search(ur_key, query = "Brother Budan Baba Melbourne")
zomato_reviews(ur_key, res_id = bbb$id[1])
zomato_locations(ur_key, query = "Melbourne")
zomato_locations(ur_key, query = "Melbourne", -37.8136, 144.9631)
# basic usage
ur_key <- "ff866ef6f69b8e3a15bf229dfaeb6de3"
url
resp
bbb
# basic usage
ur_key <- "ff866ef6f69b8e3a15bf229dfaeb6de3"
bbb <- zomato_search(ur_key, query = "Mornington")
View(add_path)
View(add_path)
#zomato_locations(ur_key, query = "Melbourne")
#zomato_locations(ur_key, query = "Melbourne", -37.8136, 144.9631)
typeof(bbb)
#zomato_locations(ur_key, query = "Melbourne")
#zomato_locations(ur_key, query = "Melbourne", -37.8136, 144.9631)
bbb$rating_text# your turn:
View(tidy_search)
View(tidy_search)
View(tidy_search)
View(tidy_search)
View(zomato_search)
resp
# search for any key words
zomato_search <- function(api_key = NULL, query) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("search"))
print(url)
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(q = query)
)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
tidy_search(rm_col(parsed$restaurants))
}
bbb <- zomato_search(ur_key, query = "Mornington")
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
# search for reviews for restaurants
zomato_reviews <- function(api_key = NULL, res_id) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("reviews"))
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(res_id = res_id)
)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
tidy_reviews(rm_col(parsed$user_reviews))
}
bbb <- zomato_search(ur_key, query = "Mornington")
# search for any key words
zomato_search <- function(api_key = NULL, query) {
is_key_null(api_key)
url <- httr::modify_url(base_url, path = add_path("search"))
#print(url)
resp <- httr::GET(
url = url,
config = httr::add_headers("user-key" = api_key),
query = list(q = query)
)
print(resp)
parsed <- jsonlite::fromJSON(
httr::content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
handle_error(resp, parsed$message)
tidy_search(rm_col(parsed$restaurants))
}
bbb <- zomato_search(ur_key, query = "Mornington")
View(bbb)
install.packages('devotools')
install.packages('devtools')
shiny::runApp('Downloads/test_not_recommended')
runApp('Downloads/test_not_recommended')
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
shiny::runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/TK/Default_Map')
runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/TK/Default_Map')
shiny::runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/TK/Default_Map')
runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/TK/Default_Map')
shiny::runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Hair/Default_Map')
shiny::runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/LB/Default_Map')
shiny::runApp('Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Preference Setting')
setwd("~/Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Default_Map")
shiny::runApp('~/Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Preference Setting')
runApp('~/Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Default_Map')
runApp('~/Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Preference Setting')
runApp()
runApp('~/Desktop/FIT 5120/IE Project/Iteration 3/IE_Iteration3/Final Maps/Food/ME/Preference Setting')
